<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>MarkSthFun Engineering Blog</title><link href="https://blog.marksth.fun/" rel="alternate"></link><link href="https://blog.marksth.fun/feeds/all.atom.xml" rel="self"></link><id>https://blog.marksth.fun/</id><updated>2019-12-01T00:00:00+13:00</updated><entry><title>Mark Something Fun!</title><link href="https://blog.marksth.fun/docs/introduction.html" rel="alternate"></link><published>2019-12-01T00:00:00+13:00</published><updated>2019-12-01T00:00:00+13:00</updated><author><name>Ju Lin</name></author><id>tag:blog.marksth.fun,2019-12-01:/docs/introduction.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Make pie, or invent universe. &lt;a href="https://www.douban.com/people/soasme/"&gt;@soasme&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi guys, my name is Ju Lin. I'm making a fun website, entitled MarkSthFun (&lt;a href="https://marksth.fun"&gt;https://marksth.fun&lt;/a&gt;).
You can pronounce it as "Mark Something Fun."&lt;/p&gt;
&lt;h2&gt;Motivate&lt;/h2&gt;
&lt;p&gt;I was a &lt;a href="https://www.douban.com"&gt;douban&lt;/a&gt; user, in which I can mark the books I have read, the movies I …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Make pie, or invent universe. &lt;a href="https://www.douban.com/people/soasme/"&gt;@soasme&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hi guys, my name is Ju Lin. I'm making a fun website, entitled MarkSthFun (&lt;a href="https://marksth.fun"&gt;https://marksth.fun&lt;/a&gt;).
You can pronounce it as "Mark Something Fun."&lt;/p&gt;
&lt;h2&gt;Motivate&lt;/h2&gt;
&lt;p&gt;I was a &lt;a href="https://www.douban.com"&gt;douban&lt;/a&gt; user, in which I can mark the books I have read, the movies I have watched, and the albums I have listened to. I was even a former Douban employee during 2012-2015. It was the best of the moments in my career. I met a lot of the most talented engineers there. It's like a sacred place in my mind. Even today, I still feel Douban's culture has influenced me the most. However, I was no longer able to live with it. Based on the cybersecurity law of the People's Republic of China, a user account without a verified phone number is prohibited from using the website. But I refuse to provide it. Not to mention years' carefulness of avoiding my content being censored. I had enough.&lt;/p&gt;
&lt;p&gt;I could have marked my book on Goodreads, marked my traces on Google Maps. But I do not trust Amazon/Google as well. (Facebook is the worst.)&lt;/p&gt;
&lt;p&gt;Since there is no tool/service in the market that fits me well, as an engineer, I started building my own.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;So, this is it. In MarkSthFun, you can mark the books you have read, the movies you have watched,
the albums you have listened, the games you have played, the places you have visited, the software you have used, the papers you have read, the concepts you have learned, etc.
You can write notes for your marks and manage things by tags.
You can decide whether to share your marks publicly or not.
You can discover fun things marked by fun people, of course, if they're willing to share.
You can search for marks by types, tags, and keywords.&lt;/p&gt;
&lt;h2&gt;Principles&lt;/h2&gt;
&lt;p&gt;Below are the principles that I keep in mind when building this new website.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Marking is way more important than socializing.&lt;/li&gt;
&lt;li&gt;Keep your data safe over the long term.&lt;/li&gt;
&lt;li&gt;If you want to know more about a person, read his RSS feed.&lt;/li&gt;
&lt;li&gt;You deserve a private account if you're an introverted person.&lt;/li&gt;
&lt;li&gt;Unshare your mark if you don't expose too much of your life traces.&lt;/li&gt;
&lt;li&gt;No ads.&lt;/li&gt;
&lt;li&gt;No third-party tracking.&lt;/li&gt;
&lt;li&gt;No like, no vote, no comment, no retweet.&lt;/li&gt;
&lt;li&gt;Display as less images as possible.&lt;/li&gt;
&lt;li&gt;Encrypt your requests when browsing.&lt;/li&gt;
&lt;li&gt;Don't overkill.&lt;/li&gt;
&lt;li&gt;Be conservative about adding new features.&lt;/li&gt;
&lt;li&gt;Pay for what you get.&lt;/li&gt;
&lt;li&gt;Use boring technology stack for sane people.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Currently, MarkSthFun is written in Python, Flask, SQLAlchemy. The site uses PostgreSQL as the database. Redis is used as the cache and the message queue. It uses Prometheus and Grafana for monitoring. The site runs servers provisioned as Digitalocean droplets with 1cpu-1gb to save the cost. Terraform, and ansible are used for provisioning cloud resources and deploying code. I use Heroku for staging. You'll be bored for the most part of the implementation, no Kubernetes, no container, no serverless, no big data, no machine learning.&lt;/p&gt;
&lt;p&gt;Here is a &lt;a href="https://marksth.fun/u/soasme/t/marksthfun-stack/"&gt;list&lt;/a&gt; of the technology stack that MarkSthFun is using, and of course, it's being listed in a MarkSthFun-style list. ;)&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you like what I'm building, do not hesitate to sign up.
It only cost you a cup of coffee ☕ per quarter.
If you can invite a friend to join, you don't need to pay for the next year's subscription fee.&lt;/p&gt;
&lt;p&gt;Enjoy your marking from today! &lt;a href="https://marksth.fun"&gt;https://marksth.fun&lt;/a&gt;&lt;/p&gt;</content><category term="Product"></category></entry><entry><title>How to Refactor Terraform Code To Modules?</title><link href="https://blog.marksth.fun/how-to-refactor-terraform-code-to-modules.html" rel="alternate"></link><published>2019-11-25T00:00:00+13:00</published><updated>2019-11-25T00:00:00+13:00</updated><author><name>Ju Lin</name></author><id>tag:blog.marksth.fun,2019-11-25:/how-to-refactor-terraform-code-to-modules.html</id><summary type="html">&lt;h2&gt;What are Terraform Modules?&lt;/h2&gt;
&lt;p&gt;Terraform Modules are re-usable packages of multiple Terraform resources and outputs.&lt;/p&gt;
&lt;p&gt;Pretty much like a package or module in any programming language, practically, we define some Terraform code serving for the same purpose in one directory.&lt;/p&gt;
&lt;h2&gt;Why do we need Terraform Modules?&lt;/h2&gt;
&lt;p&gt;We could squash all …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What are Terraform Modules?&lt;/h2&gt;
&lt;p&gt;Terraform Modules are re-usable packages of multiple Terraform resources and outputs.&lt;/p&gt;
&lt;p&gt;Pretty much like a package or module in any programming language, practically, we define some Terraform code serving for the same purpose in one directory.&lt;/p&gt;
&lt;h2&gt;Why do we need Terraform Modules?&lt;/h2&gt;
&lt;p&gt;We could squash all Terraform code in a single &lt;code&gt;main.tf&lt;/code&gt; file, but wouldn't it be a messy hell?&lt;/p&gt;
&lt;p&gt;Instead, organizing highly-related Terraform code into a Terraform Module keeps the code base tidy.
In particular, the timing of moving Terraform code into a Terraform Module is when we need a higher-level concept. For example, I want a module that "manages DNS of the site," instead of having a bunch of &lt;code&gt;digitalocean_record&lt;/code&gt; resources.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dns&amp;quot;&lt;/span&gt; {
  &lt;span class="n"&gt;source&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;./modules/dns&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;site_domain&lt;/span&gt; = &lt;span class="n"&gt;var&lt;/span&gt;.&lt;span class="n"&gt;site_domain&lt;/span&gt;
  &lt;span class="n"&gt;site_domain_txt&lt;/span&gt; = &lt;span class="n"&gt;var&lt;/span&gt;.&lt;span class="n"&gt;site_domain_txt&lt;/span&gt;
  &lt;span class="n"&gt;site_domain_mx&lt;/span&gt; = &lt;span class="n"&gt;var&lt;/span&gt;.&lt;span class="n"&gt;site_domain_mx&lt;/span&gt;
  &lt;span class="n"&gt;site_domain_vip&lt;/span&gt; = &lt;span class="n"&gt;digitalocean_floating_ip&lt;/span&gt;.&lt;span class="n"&gt;site_domain_vip&lt;/span&gt;.&lt;span class="n"&gt;ip_address&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How to Organize Terraform Modules?&lt;/h2&gt;
&lt;p&gt;It depends on how you manage your codebase. The &lt;code&gt;source&lt;/code&gt; configures the path to read Terraform Module code. In the above example, it loads the module from a relative directory &lt;code&gt;./modules/dns&lt;/code&gt;. The other option is by specifying it to a remote Git repo, but MarkSthFun prefers monolithic repo, so this is no needed.&lt;/p&gt;
&lt;p&gt;An easy way to gather modules is by putting them to a &lt;code&gt;modules&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -R .
main.tf

modules/dns:
main.tf      outputs.tf   variables.tf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All codes in &lt;code&gt;modules/dns/*.tf&lt;/code&gt; were originally in &lt;code&gt;./main.tf&lt;/code&gt;, but now they're separately defined. See &lt;a href="https://github.com/soasme/shire/commit/9f9b503b3c68f7b7fe576df4eed4b603b7cd2368"&gt;commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After moving the code, we need to &lt;strong&gt;move states&lt;/strong&gt;. Terraform isn't smart enough to guess your code has changed place. It will destroy resources and re-create resources, although you haven't changed anything.&lt;/p&gt;
&lt;p&gt;We can achieve it by using &lt;code&gt;terraform state mv [SRC] [DEST]&lt;/code&gt;. Below are commands I executed right after committing the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ terraform state mv digitalocean_record.at_txt module.dns.digitalocean_record.at_txt
$ terraform state mv digitalocean_record.at_mx module.dns.digitalocean_record.at_mx
$ terraform state mv digitalocean_record.at_A module.dns.digitalocean_record.at_A
$ terraform state mv digitalocean_domain.site_domain module.dns.digitalocean_domain.site_domain
$ terraform plan
No changes. Infrastructure is up-to-date.
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Side Notes&lt;/h2&gt;
&lt;p&gt;Just as refactoring code in any programming language, it's a good habit not to introduce new code. By doing this, we can assure the functions remains the same after the change.&lt;/p&gt;</content><category term="Engineering"></category></entry></feed>