---
- hosts: lb
  pre_tasks:
    - name: Check if letsencrypt state exists
      stat: path=/etc/letsencrypt
      register: letsencrypt_state

    - name: Restore certbot state
      synchronize:
        src: "{{ letsencrypt_state_dir }}"
        dest: "/etc/letsencrypt/"
        mode: push
      when: not letsencrypt_state.stat.exists

    - name: Setup digitalocean credentials for certbot
      copy:
        content: "dns_digitalocean_token={{ lookup('env', 'DO_TOKEN') }}"
        dest: /root/.certbot-digitalocean.ini
        mode: 0600
      tags: [certbot]

    - name: Update epel repo
      yum:
        name:
          - epel-release
          - yum-utils
        state: present
      tags: [certbot]

    - name: Enable the optional channel
      command: yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
      tags: [certbot]

    - name: Install Certbot DigitalOcean plugin
      yum:
        name:
          - python2-certbot-dns-digitalocean
        state: present
      tags: [certbot]
  post_tasks:
    - name: Backup certbot state
      synchronize:
        src: "/etc/letsencrypt/"
        dest: "{{ letsencrypt_backup_dir }}"
        mode: pull
      when: letsencrypt_state.stat.exists
  roles:
    # Enable next monday, since it's rate limited.
    # Need to backup certs so that we won't be rate limited again.
    # Pre-task: upload certs if local has one.
    # "IMPORTANT NOTES:", " - Your account credentials have been saved in your Certbot", "   configuration directory at /etc/letsencrypt. You should make a", "   secure backup of this folder now. This configuration directory will", "   also contain certificates and private keys obtained by Certbot so", "   making regular backups of this folder is ideal.
    - role: geerlingguy.certbot
      tags: [certbot]
    # Post-task: fetch the file 
    - role: nginxinc.nginx
      tags: [nginx]
  vars:
    letsencrypt_state_dir: "{{ lookup('env', 'LETSENCRYPT_STATE_DIR') }}"
    letsencrypt_backup_dir: "{{ lookup('env', 'LETSENCRYPT_BACKUP_DIR') }}"
    certbot_admin_email: "{{ lookup('env', 'CERTBOT_ADMIN_EMAIL') }}"
    certbot_create_if_missing: true
    certbot_create_standalone_stop_services: []
    certbot_create_method: standalone
    certbot_certs:
      - domains: ["{{ lookup('env', 'SITE_DOMAIN') }}", "*.{{ lookup('env', 'SITE_DOMAIN') }}"]
    certbot_create_command: "certbot certonly --noninteractive --dns-digitalocean --dns-digitalocean-credentials=/root/.certbot-digitalocean.ini --dns-digitalocean-propagation-seconds=60 --agree-tos --email {{ cert_item.email | default(certbot_admin_email) }} -d {{ cert_item.domains | join(',') }}"
    nginx_http_template_enable: true
    nginx_http_template:
      shire80:
        template_file: http/default.conf.j2
        conf_file_name: shire-80.conf
        conf_file_location: /etc/nginx/conf.d/
        port: 80
        server_name: "{{ lookup('env', 'SITE_DOMAIN') }}"
        https_redirect: true
      shire443:
        template_file: http/default.conf.j2
        conf_file_name: shire-443.conf
        conf_file_location: /etc/nginx/conf.d/
        port: 443
        listen:
          - ip: 0.0.0.0
            port: 443
            opts: [ssl, http2]
        server_name: "{{ lookup('env', 'SITE_DOMAIN') }}"
        ssl:
          key: "/etc/letsencrypt/live/{{ lookup('env', 'SITE_DOMAIN') }}/privkey.pem"
          cert: "/etc/letsencrypt/live/{{ lookup('env', 'SITE_DOMAIN') }}/fullchain.pem"
          protocols: TLSv1 TLSv1.1 TLSv1.2
          prefer_server_ciphers: true
          session_timeout: 5m
        error_page: /usr/share/nginx/html
        autoindex: false
        web_server:
          locations:
            backend:
              location: /
              proxy_pass: http://web.shire.sfo2.svc.{{ lookup('env', 'SITE_DOMAIN' }}:8000
              proxy_set_header:
                header_host:
                  name: Host
                  value: $host
                header_x_real_ip:
                  name: X-Real-IP
                  value: $remote_addr
                header_x_forwarded_for:
                  name: X-Forwarded-For
                  value: $proxy_add_x_forwarded_for
                header_x_forwarded_proto:
                  name: X-Forwarded-Proto
                  value: $scheme
              proxy_ignore_headers:
                - Vary
                - Cache-Control
          http_demo_conf: false
      blog80:
        template_file: http/default.conf.j2
        conf_file_name: blog-80.conf
        conf_file_location: /etc/nginx/conf.d/
        port: 80
        server_name: "{{ lookup('env', 'BLOG_DOMAIN') }}"
        https_redirect: true
      blog443:
        template_file: http/default.conf.j2
        conf_file_name: blog-443.conf
        conf_file_location: /etc/nginx/conf.d/
        port: 443
        listen:
          - ip: 0.0.0.0
            port: 443
            opts: [ssl, http2]
        ssl:
          key: "/etc/letsencrypt/live/{{ lookup('env', 'SITE_DOMAIN') }}/privkey.pem"
          cert: "/etc/letsencrypt/live/{{ lookup('env', 'SITE_DOMAIN') }}/fullchain.pem"
        web_server:
          locations:
            default:
              location: /
              html_file_location: /usr/share/nginx/html
              html_file_name: index.html
              autoindex: false
          http_demo_conf: false
